{"version":3,"sources":["Loader.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;IAGqB,M;AACjB;;;AAGA,sBAAa;AAAA;;AACT,aAAK,GAAL,GAAY,YAAY,IAAI,cAAJ,EAAb,GAAqC,cAArC,GAAsD,cAAjE;AACA,aAAK,WAAL,GAAmB,6BAAnB;AACH;;AAED;;;;;;;;;kCAK2C;AAAA,gBAAnC,MAAmC,yDAA1B,EAAC,KAAI,mBAAL,EAA0B;;AACvC,gBAAI,UAAU,IAAI,KAAK,GAAT,EAAd;;AAEA,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAmB;AAClC,wBAAQ,MAAR,GAAiB,YAAW;AACxB,4BAAQ,OAAR;AACH,iBAFD;AAGA,wBAAQ,OAAR,GAAkB,YAAW;AACzB,2BAAO,OAAP;AACH,iBAFD;AAGA,wBAAQ,IAAR,CAAa,KAAb,EAAoB,OAAO,GAA3B,EAAgC,IAAhC;AACA,wBAAQ,IAAR;AACH,aATM,CAAP;AAUH;;AAGD;;AAEA;;;;;;;;wCAKuC;AAAA,gBAAzB,MAAyB,yDAAlB,EAAC,QAAO,QAAR,EAAkB;;AACnC,gBAAI,kBAAkB,KAAK,WAAL,GAAmB,OAAO,MAAhD;AACA,mBAAO,KAAK,OAAL,CAAa,EAAC,KAAI,eAAL,EAAb,CAAP;AACH;;;wCAEc;AACX,oBAAQ,IAAR,CAAa,8CAAb;AACH;;AAED;;;;;;+BAGM;AACF,gBAAI,KAAK,IAAT;AACA,iBAAK,aAAL,CAAmB,EAAC,QAAQ,QAAT,EAAnB,EAAwC,IAAxC,CAA6C,YAAK;AAC9C;AACA,mBAAG,kBAAH,GACK,IADL,CACU,UAAC,IAAD,EAAS;AACX,uBAAG,KAAH,CAAS,IAAT;AACH,iBAHL;AAKH,aAPD,EAQK,KARL,CAQW,UAAC,IAAD,EAAS;AACZ,wBAAQ,KAAR,CAAc,wCAAd,EAAwD,IAAxD;AACH,aAVL;AAWH;;;6CAEoB;AACjB,gBAAI,KAAK,IAAT;;AAEA,mBAAO,QAAQ,GAAR,CAAY;AACf;AACA,eAAG,OAAH,CAAW,EAAC,KAAK,8BAAN,EAAX,CAFe;AAGf;AACA,eAAG,OAAH,CAAW,EAAC,KAAK,sBAAN,EAAX,CAJe,CAAZ,CAAP;AAMH;;;;;;kBAzEgB,M","file":"Loader-compiled.js","sourcesContent":["/**\n * Class for loading of resources\n */\nexport default class Loader {\n    /**\n     * Constructor\n     */\n    constructor(){\n        this.XHR = (\"onload\" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;\n        this.serverAlias = \"http://localhost:8080/slot/\";\n    }\n\n    /**\n     * GET Action\n     * @param config\n     * @returns {Promise}\n     */\n    httpGet(config = {url:'http://google.com'}){\n        var request = new this.XHR();\n\n        return new Promise((resolve, reject)=>{\n            request.onload = function() {\n                resolve(request);\n            };\n            request.onerror = function() {\n                reject(request);\n            };\n            request.open(\"GET\", config.url, true);\n            request.send();\n        });\n    }\n\n\n    /*****************SUGAR********************/\n\n    /**\n     * Send AJAX request to  Slot Server\n     * @param config\n     * @returns {Promise}\n     */\n    sendServerXHR(config={action:\"config\"}){\n        let serverActionUrl = this.serverAlias + config.action;\n        return this.httpGet({url:serverActionUrl});\n    }\n\n    loadResources(){\n        console.info('BEGIN to load resources from a parsed JSON-S');\n    }\n\n    /**\n     * //@TODO In a future server init action must be created\n     */\n    init(){\n        let me = this;\n        this.sendServerXHR({action: 'config'}) .then(()=> {\n            //In case of good response get resources and start the game\n            me._getResourceConfig()\n                .then((data)=> {\n                    me.start(data);\n                });\n\n        })\n            .catch((data)=> {\n                console.error('Error in connection with a server >>> ', data);\n            });\n    }\n\n    _getResourceConfig() {\n        let me = this;\n\n        return Promise.all([\n            //IMAGES\n            me.httpGet({url: './config/images/desktop.json'}),\n            //MAIN\n            me.httpGet({url: './config/config.json'})\n        ])\n    }\n}"]}