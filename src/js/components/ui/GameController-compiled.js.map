{"version":3,"sources":["GameController.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqB,c;AACjB,4BAAY,MAAZ,EAAoB,QAApB,EAA8B,KAA9B,EAAoC;AAAA;;AAChC,YAAI,KAAK,IAAT;;AAEA,WAAG,MAAH,GAAY,KAAZ;AACA,WAAG,SAAH,GAAe,QAAf;AACA,WAAG,UAAH,GAAgB,EAAhB;AACA,WAAG,KAAH,CAAS,MAAT;AACA,WAAG,eAAH,GAAqB,EAArB;AACA,WAAG,WAAH,GAAiB,CAAjB;AACA,WAAG,aAAH,GAAmB,CAAnB;AACA,WAAG,MAAH,GAAY,KAAZ;AACA,WAAG,eAAH,GAAqB,CAArB;;AAEA,WAAG,mBAAH,GAAyB,EAAzB;AACA,WAAG,SAAH,GAAe,KAAf;AACA,WAAG,OAAH,GAAa,OAAO,MAAP,CAAc,OAAd,IAAyB,EAAtC;AACA;AACA,WAAG,qBAAH;AACH;;;;8BAEK,E,EAAG,CAER;;;8BAEK,M,EAAO;AACT,gBAAI,KAAK,IAAT;AACA,eAAG,aAAH,CAAiB,MAAjB;AACA,eAAG,YAAH,CAAgB,OAAO,MAAvB;AACA,eAAG,YAAH,CAAgB,OAAO,MAAvB;AACH;;AAED;;;;;;;gDAIwB;AACpB,gBAAI,KAAK,IAAT;;AAEA,iBAAK,iBAAL,GAAyB,OAAO,qBAAP,IACrB,OAAO,2BADc,IAErB,OAAO,wBAFc,IAGrB,OAAO,sBAHc,IAIrB,OAAO,uBAJc,IAKrB,UAAU,QAAV,EAAoB;AAChB,6BAAa,GAAG,aAAhB;AACA,mBAAG,aAAH,GAAmB,WAAW,QAAX,EAAqB,KAAK,KAAL,CAAW,OAAO,EAAlB,CAArB,CAAnB;AACH,aARL;AASH;;AAED;;;;;;;;sCAKc;AACV,gBAAI,KAAK,IAAT;AAAA,gBACI,MAAM,KAAK,GAAL,EADV;AAAA,gBAEI,OAAO,MAAM,GAAG,mBAFpB;;AAIA;AACA,gBAAI,OAAO,GAAX,EAAgB;AACZ,uBAAO,OAAO,EAAd;AACH;;AAED,eAAG,eAAH,GAAqB,OAAO,CAA5B;;AAEA,eAAG,WAAH,IAAkB,GAAG,eAArB;;AAEA,mBAAO,GAAP;AACH;;AAED;;;;;;;oDAI4B;AACxB,gBAAI,KAAK,IAAT;;AAEA,eAAG,iBAAH,CAAqB,IAArB,CAA0B,MAA1B,EAAkC,YAAY;AAC1C,mBAAG,GAAH;AACH,aAFD;AAGH;;;sCAEa,M,EAAQ;AAClB,gBAAI,KAAK,IAAT;AAAA,gBACI,QAAQ,IAAI,KAAK,SAAL,CAAe,SAAnB,EADZ;AAAA,gBAEI,iBAFJ;;AAIA,uBAAW,KAAK,SAAL,CAAe,kBAAf,CAAkC,OAAO,KAAzC,EAAgD,OAAO,MAAvD,EAA+D,EAAC,WAAW,IAAZ,EAAkB,YAAY,CAA9B,EAA/D,CAAX;AACA;;AAEA,qBAAS,IAAT,CAAc,EAAd,GAAmB,wBAAnB;AACA,mBAAO,MAAP,CAAc,WAAd,CAA0B,SAAS,IAAnC;;AAEA,eAAG,KAAH,GAAW,KAAX;AACA,eAAG,iBAAH,GAAuB,IAAI,KAAK,SAAL,CAAe,SAAnB,EAAvB;AACA,eAAG,KAAH,CAAS,QAAT,CAAkB,GAAG,iBAArB;AACA,eAAG,QAAH,GAAc,QAAd;AACH;;;uCAEuB;AAAA,gBAAX,MAAW,yDAAJ,EAAI;;AACpB,gBAAI,KAAK,IAAT;AAAA,gBACI,YAAY,OAAO,eAAP,IAA0B,EAD1C;AAAA,gBAEI,SAAS,EAFb;;AAIA,eAAG,MAAH,GAAY,GAAG,SAAH,CAAa,MAAzB;AACA,eAAG,MAAH,CAAU,IAAV,CAAe,UAAf,EAA2B,UAAU,MAAV,EAAkB,GAAlB,EAAuB;AAAA;AAAA;AAAA;;AAAA;AAC9C,yCAAkB,SAAlB,8HAA4B;AAAA,4BAAnB,KAAmB;;AACxB,+BAAO,MAAM,SAAb,IAA0B,GAAG,SAAH,CAAa,OAAb,CAAqB,SAArB,CAA+B,MAAM,QAArC,CAA1B;AACH;AAH6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAK9C,mBAAG,MAAH,GAAY,MAAZ;AACH,aAND;AAOH;;AAED;;;;;;;;qCAKa,W,EAAa;AACtB,gBAAI,WAAW,KAAK,MAAL,CAAY,SAAZ,CAAsB,WAAtB,IAAqC,WAArC,GAAmD,EAAlE;AAAA,gBACI,SAAS,EADb;;AAGA,qBAAS,IAAT,CAAc,MAAd;;AAJsB;AAAA;AAAA;;AAAA;AAMtB,sCAAc,QAAd,mIAAuB;AAAA,wBAAd,CAAc;;AACnB,2BAAO,CAAP,IAAY,oBAAU,EAAC,OAAO,KAAK,MAAb,EAAV,CAAZ;AACH;AARqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUtB,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,MAAL,CAAY,MAAZ,EAAoB,IAApB;AACA,iBAAK,YAAL,GAAoB,MAApB;AACH;;;;;;kBAtIgB,c","file":"GameController-compiled.js","sourcesContent":["import Scene from './Scene';\n\nexport default class GameController{\n    constructor(config, renderer, utils){\n        let me = this;\n\n        me._utils = utils;\n        me._renderer = renderer;\n        me.canvasList = {};\n        me._init(config);\n        me.animationBuffer = [];\n        me.currentTime = 0;\n        me.timeFromStart = 0;\n        me.paused = false;\n        me.currentStepTime = 0;\n\n        me.renderLoopEndEvents = [];\n        me.isRunning = false;\n        me.sprites = config.images.sprites || {};\n        // Select which render function to use\n        me._selectRenderFunction();\n    }\n\n    start(cb){\n\n    }\n\n    _init(config){\n        let me = this;\n        me._initRenderer(config);\n        me._setupImages(config.images);\n        me._setupScenes(config.scenes);\n    }\n\n    /**\n     * @private\n     * Select which render function to use\n     */\n    _selectRenderFunction() {\n        var me = this;\n\n        this.animationFunction = window.requestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            window.mozRequestAnimationFrame ||\n            window.oRequestAnimationFrame ||\n            window.msRequestAnimationFrame ||\n            function (callback) {\n                clearTimeout(me.renderTimeout);\n                me.renderTimeout = setTimeout(callback, Math.round(1000 / 60));\n            };\n    }\n\n    /**\n     * @private\n     *\n     * @return {number}\n     */\n    _updateTime() {\n        var me = this,\n            now = Date.now(),\n            diff = now - me.lastTimeStepOccured;\n\n        // Check if more time than allowed has passed since the last frame\n        if (diff > 250) {\n            diff = 1000 / 60;\n        }\n\n        me.currentStepTime = diff | 0;\n\n        me.currentTime += me.currentStepTime;\n\n        return now;\n    }\n\n    /**\n     * @private\n     * Signals the manager that the next animation step should be rendered\n     */\n    _requestNextAnimationStep() {\n        var me = this;\n\n        me.animationFunction.call(window, function () {\n            me.run();\n        });\n    }\n\n    _initRenderer(config) {\n        let me = this,\n            stage = new this._renderer.Container(),\n            renderer;\n\n        renderer = this._renderer.autoDetectRenderer(config.width, config.height, {antialias: true, resolution: 1});\n        // renderDisplay = \"Auto - \";\n\n        renderer.view.id = \"canvasAnimationManager\";\n        config.parent.appendChild(renderer.view);\n\n        me.stage = stage;\n        me.rootDisplayObject = new this._renderer.Container();\n        me.stage.addChild(me.rootDisplayObject);\n        me.renderer = renderer;\n    }\n\n    _setupImages(config={}) {\n        let me = this,\n            rawImages = config.animationImages || [],\n            images = {};\n\n        me.loader = me._renderer.loader;\n        me.loader.once('complete', function (loader, res) {\n            for (let image of rawImages){\n                images[image.imageName] = me._renderer.Texture.fromImage(image.imageSrc)\n            }\n\n            me.images = images;\n        });\n    }\n\n    /**\n     * @private\n     *\n     * @param extraScenes\n     */\n    _setupScenes(extraScenes) {\n        let sceneCfg = this._utils.isDefined(extraScenes) ? extraScenes : [],\n            scenes = {};\n\n        sceneCfg.push(\"base\");\n\n        for (let i of sceneCfg){\n            scenes[i] = new Scene({utils: this._utils});\n        }\n\n        this.scenes = scenes;\n        this.scenes['base'].play();\n        this.currentScene = \"base\";\n    }\n}"]}